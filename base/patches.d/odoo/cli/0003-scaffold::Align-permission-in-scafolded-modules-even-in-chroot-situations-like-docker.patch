In some cases (umask settings!), the current user does not create with
group write permissions. When, on the other hand, the current user is
different from the developer (ej chroot setups / container user),
the developer will not be able to start coding without adapting permissions,
even though he has carefully crafted the groups outside and inside the chroot
/ container environment and is part of the gid of the current user.

 odoo/cli/scaffold.py | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/odoo/cli/scaffold.py b/odoo/cli/scaffold.py
index 7293f82a1d6..86f5853f18f 100644
--- a/odoo/cli/scaffold.py
+++ b/odoo/cli/scaffold.py
@@ -79,6 +79,7 @@ def directory(p, create=False):
             os.path.expandvars(p)))
     if create and not os.path.exists(expanded):
         os.makedirs(expanded)
+        os.chmod(expanded, 0775)
     if not os.path.isdir(expanded):
         die("%s is not a directory" % p)
     return expanded
@@ -134,6 +135,15 @@ class template(object):
                     env.from_string(content.decode('utf-8'))\
                        .stream(params or {})\
                        .dump(f, encoding='utf-8')
+        # Ensure group write permissions guarantee,
+        # if this script is executed by another user (ej. container user / chroot)
+        modpath = os.path.join(directory, modname)
+        for root, dirs, files in os.walk(modpath):
+            for momo in dirs:
+                os.chmod(os.path.join(root, momo), 0775)
+            for momo in files:
+                os.chmod(os.path.join(root, momo), 0775)
+            os.chmod(root, 0775)
 
 def die(message, code=1):
     print >>sys.stderr, message
