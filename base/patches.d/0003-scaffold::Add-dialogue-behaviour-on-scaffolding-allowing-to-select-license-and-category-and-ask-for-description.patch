You can use this patch as a convenient way to augment your module templating
and make the flow more user friendly.

It passes thre extra parameters to the jinja environment:
 * summary
 * description
 * options['license']
 * options['category']

You might guess it options dict is meant for usage in the odoo manifest options.

 odoo/cli/scaffold.py | 53 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 53 insertions(+)

diff --git a/odoo/cli/scaffold.py b/odoo/cli/scaffold.py
index 86f5853f18f..ccac8eb7351 100644
--- a/odoo/cli/scaffold.py
+++ b/odoo/cli/scaffold.py
@@ -1,52 +1,105 @@
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 import argparse
 import os
 import re
 import sys
 import json
 
 import jinja2
+try:
+    from pick import pick
+except:
+    pick = None
 
 from . import Command
 
 class Scaffold(Command):
     """ Generates an Odoo module skeleton. """
 
     def run(self, cmdargs):
         # TODO: bash completion file
         parser = argparse.ArgumentParser(
             prog="%s scaffold" % sys.argv[0].split(os.path.sep)[-1],
             description=self.__doc__,
             epilog=self.epilog(),
         )
         parser.add_argument(
             '-t', '--template', type=template, default=template('default'),
             help="Use a custom module template, can be a template name or the"
                  " path to a module template (default: %(default)s)")
         parser.add_argument(
             '-j', '--json', type=json.loads, default='{}',
             help="Load a parameters json dict that will be passed to the"
                  " jinja2 environment (default: %(default)s)")
         parser.add_argument('name', help="Name of the module to create")
         parser.add_argument(
             'dest', default='.', nargs='?',
             help="Directory to create the module in (default: %(default)s)")
 
         if not cmdargs:
             sys.exit(parser.print_help())
         args = parser.parse_args(args=cmdargs)
 
+        summary = raw_input("Write a short summary (optional): ")
+        description = raw_input("Write a description (optional): ")
+        options = {}
+        if pick:
+            title = 'Choose the module category: '
+            # See /base/module/module_data.xml
+            selection = [
+                'Accounting',
+                'Discuss',
+                'Document Management',
+                'eCommerce',
+                'Human Resources',
+                'Industries',
+                'Localization',
+                'Manufacturing',
+                'Marketing',
+                'Point of Sale',
+                'Productivity',
+                'Project',
+                'Purchases',
+                'Sales',
+                'Warehouse',
+                'Website',
+                'Extra Tools',
+                'Hidden',
+            ]
+            options['category'], _ = pick(selection, title)
+            title = 'Choose the module license: '
+            # See /base/module/module.py
+            selection = [
+                'GPL-2',
+                'GPL-2 or any later version',
+                'GPL-3',
+                'GPL-3 or any later version',
+                'AGPL-3',
+                'LGPL-3',
+                'Other OSI approved licence',
+                'OEEL-1',
+                'OPL-1',
+                'Other proprietary',
+            ]
+            options['license'], _ = pick(selection, title)
+
         params = {'name': args.name}
         params.update(args.json)
+        if summary:
+            params.update({'summary': summary})
+        if description:
+            params.update({'description': description})
+        if options:
+            params.update(options)
 
         args.template.render_to(
             snake(args.name),
             directory(args.dest, create=True),
             params)
 
     def epilog(self):
         return "Built-in templates available are: %s" % ', '.join(
             d for d in os.listdir(builtins())
             if d != 'base'
         )
