You can use this patch for advanced templating, so to be able to pass a json
object as parameters to the jinja templating environment.

Example usage: set author email, github account, etc automatically.

 odoo/cli/scaffold.py | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/odoo/cli/scaffold.py b/odoo/cli/scaffold.py
index 83c2befe96c..7293f82a1d6 100644
--- a/odoo/cli/scaffold.py
+++ b/odoo/cli/scaffold.py
@@ -1,48 +1,56 @@
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 import argparse
 import os
 import re
 import sys
+import json
 
 import jinja2
 
 from . import Command
 
 class Scaffold(Command):
     """ Generates an Odoo module skeleton. """
 
     def run(self, cmdargs):
         # TODO: bash completion file
         parser = argparse.ArgumentParser(
             prog="%s scaffold" % sys.argv[0].split(os.path.sep)[-1],
             description=self.__doc__,
             epilog=self.epilog(),
         )
         parser.add_argument(
             '-t', '--template', type=template, default=template('default'),
             help="Use a custom module template, can be a template name or the"
                  " path to a module template (default: %(default)s)")
+        parser.add_argument(
+            '-j', '--json', type=json.loads, default='{}',
+            help="Load a parameters json dict that will be passed to the"
+                 " jinja2 environment (default: %(default)s)")
         parser.add_argument('name', help="Name of the module to create")
         parser.add_argument(
             'dest', default='.', nargs='?',
             help="Directory to create the module in (default: %(default)s)")
 
         if not cmdargs:
             sys.exit(parser.print_help())
         args = parser.parse_args(args=cmdargs)
 
+        params = {'name': args.name}
+        params.update(args.json)
+
         args.template.render_to(
             snake(args.name),
             directory(args.dest, create=True),
-            {'name': args.name})
+            params)
 
     def epilog(self):
         return "Built-in templates available are: %s" % ', '.join(
             d for d in os.listdir(builtins())
             if d != 'base'
         )
 
 builtins = lambda *args: os.path.join(
     os.path.abspath(os.path.dirname(__file__)),
     'templates',
